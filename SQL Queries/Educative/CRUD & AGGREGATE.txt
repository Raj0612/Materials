create database educative;

use educative;

CRUD OPERATIONS:
################

CREATE TABLE Employees (
     EmpID   INT AUTO_INCREMENT PRIMARY KEY,
     EmpName VARCHAR(50),
     Salary  DECIMAL(10, 2)
);

--Insert Query:
--------------
INSERT INTO Employees VALUES('1', 'Allen Kim', '45000');
INSERT INTO Employees VALUES('2', 'Allen Kim', '55000');
INSERT INTO Employees VALUES(3, 'Sarah Ronald', 65000);

select * from Employees;

--Update Query:
---------------
UPDATE Employees SET  Salary = 75000 
WHERE  EmpID = (
       SELECT EmpID
       FROM (SELECT EmpID FROM Employees WHERE EmpName = 'Sarah Ronald')
       AS subquery
);

Using Join:
-----------
UPDATE Employees AS e
JOIN   (SELECT EmpID FROM Employees WHERE EmpName = 'Sarah Ronald') AS s
ON     e.EmpID = s.EmpID
SET    e.Salary = 65000;


SET    @employee_id = (SELECT EmpID FROM Employees WHERE EmpName = 'Sarah Ronald');
UPDATE Employees
SET    Salary = 55000 
WHERE  EmpID = @employee_id;


--Delete a Record


--Column alias
SELECT ColumnName AS ColAlias FROM   TableName;

--Column alias with space
SELECT ColumnName AS "Col Alias" FROM   TableName;

--Table alias 
SELECT t.ColumnName FROM   TableName AS t;

--Table alias without using AS
SELECT t.ColumnName FROM   TableName t;

***************************************************************************************************************************************************************************************

AGGREGATE FUNCTIONS:
####################

CREATE TABLE StudentGrades (  
    RecordID INT PRIMARY KEY,  
    StudentID VARCHAR(20),  
    StudentName VARCHAR(50),  
    Subject VARCHAR(50),  
    Marks DECIMAL(5,2) NULL  
);  
  
-- Insert the records  
INSERT INTO StudentGrades (RecordID, StudentID, StudentName, Subject, Marks)  
VALUES  
    (1, 'st-101', 'Alexa', 'Mathematics', 90.00),  
    (2, 'st-101', 'Alexa', 'Science', NULL),  
    (3, 'st-102', 'Diana', 'Mathematics', 80.00),  
    (4, 'st-102', 'Diana', 'Science', 88.00),  
    (5, 'st-103', 'Carl', 'Mathematics', NULL),  
    (6, 'st-103', 'Carl', 'Science', 92.00),  
    (7, 'st-104', 'Sara', 'Mathematics', 75.00),  
    (8, 'st-104', 'Sara', 'Science', 85.00),  
    (9, 'st-105', 'Karen', 'Mathematics', 85.00),  
    (10, 'st-105', 'Karen', 'Science', 90.00);  
    
    
select * from StudentGrades;

Aggregate Records Using SUM
###########################

Total Marks of Mathematics:
---------------------------

SELECT SUM(Marks) AS TotalMarksMaths FROM   StudentGrades WHERE  Subject = 'Mathematics';

Using the CASE statement:
*************************
SELECT SUM(CASE WHEN Subject = 'Mathematics' THEN Marks ELSE 0 END) AS TotalMarksMaths FROM StudentGrades;


Finding the sum of each subject in the StudentGrades table:
-----------------------------------------------------------

SELECT   SUM(Marks) AS TotalMarks FROM     StudentGrades GROUP BY Subject;
SELECT   Subject, SUM(Marks) AS TotalMarks FROM     StudentGrades GROUP BY Subject; 

***************************************************************************************************************************************************************************************


AGGREGATE Records Using AVG
###########################

-- Create the Products table  
CREATE TABLE Products (  
    ProductID INT PRIMARY KEY,  
    ProductName VARCHAR(100),  
    Category VARCHAR(50),  
    Price DECIMAL(10,2),  
    UnitsSold INT  
);  
  
-- Insert the records into the Products table  
INSERT INTO Products (ProductID, ProductName, Category, Price, UnitsSold)  
VALUES  
    (1, 'Smartphone', 'Electronics', 599.99, 100),  
    (2, 'Laptop', 'Electronics', 999.99, 50),  
    (3, 'Headphones', 'Electronics', 149.99, 75),  
    (4, 'T-shirt', 'Apparel', 19.99, 200),  
    (5, 'Jeans', 'Apparel', 39.99, 150),  
    (6, 'Running shoes', 'Footwear', 79.99, 100),  
    (7, 'Bagpack', 'Accessories', 49.99, 80);  
	
	
SELECT   Category, AVG(Price) AS AveragePrice FROM Products GROUP BY Category;

Using Join:
***********
SELECT   p.Category, AVG(p2.Price) AS AveragePrice
FROM     Products p
JOIN     Products p2 ON p.Category = p2.Category
GROUP BY p.Category;

Total revenue generated by each product:
-------------------------------------------
SELECT   ProductID,
         SUM(Price * UnitsSold) AS TotalRevenue
FROM     Products
GROUP BY ProductID;

To find the records where the average price of each category is greater than 50:
--------------------------------------------------------------------------------

SELECT   Category, AVG(Price) FROM Products GROUP BY Category HAVING AVG(Price) > 50;

Second Highest Salary:
----------------------
--Aggregate Records Using MIN/MAX 
SELECT MAX(Salary) AS SecondHighestSalary FROM   Employees WHERE  Salary NOT IN (SELECT Max(Salary) FROM Employees);
SELECT MAX(Salary) AS SecondHighestSalary FROM   Employees WHERE  Salary < (SELECT Max(Salary) FROM   Employees);
SELECT MAX(Salary) AS SecondHighestSalary FROM   Employees WHERE  Salary <> (SELECT Max(Salary) FROM   Employees); 
SELECT Salary AS SecondHighestSalary FROM  Employees ORDER BY Salary DESC LIMIT  1, 1; 
SELECT Salary AS SecondHighestSalary FROM  Employees ORDER BY Salary DESC LIMIT  1 OFFSET 1;
SELECT Salary AS SecondHighestSalary FROM  Employees WHERE Salary < (SELECT  Max(Salary) FROM Employees) ORDER BY Salary DESC LIMIT 1;  

To find 3rd Highest Salary:
---------------------------
SELECT Salary AS SecondHighestSalary FROM  Employees ORDER BY Salary DESC Limit 2, 1;


Finding the second-lowest value in the Employees table:
-------------------------------------------------------
SELECT   MIN(Salary) AS SecondLowestSalary FROM   Employees WHERE  Salary NOT IN (SELECT MIN(Salary) FROM   Employees);


Find the nth-highest number:
----------------------------
SELECT Salary FROM Employees ORDER BY Salary DESC LIMIT n-1, 1; 

***************************************************************************************************************************************************************************************

AGGREGATE RECORDS Using COUNT
#############################

To Find students absent during test:
------------------------------------
SELECT COUNT(*) AS AbsentStudents FROM   StudentGrades WHERE  Marks IS NULL;
SELECT SUM(CASE WHEN Marks IS NULL THEN 1 ELSE 0 END) AS AbsentStudents FROM   StudentGrades;
SELECT SUM(IF(Marks IS NULL, 1, 0)) AS AbsentStudents FROM   StudentGrades;
SELECT COUNT(*) - COUNT(Marks) AS AbsentStudents FROM  StudentGrades; --(negated condition)

Finding the count of all the students who got more than 85 marks:
-----------------------------------------------------------------
SELECT COUNT(*) AS Above85 FROM   StudentGrades WHERE  Marks > 85;