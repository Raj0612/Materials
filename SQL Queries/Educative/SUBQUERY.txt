SUBQUERY
########

CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    EmpName VARCHAR(100),
    Salary DECIMAL(10,2)
);

INSERT INTO Employees (EmpID, EmpName, Salary) VALUES
(1, 'Susan Lee', 50000.00),
(2, 'Alexa Smith', 60000.00),
(3, 'Sana Amberson', 45000.00),
(4, 'Sarah Ronald', 47000.00);


CREATE TABLE Skills (
    SkillID INT,
    EmpID INT,
    SkillName VARCHAR(50)
);

INSERT INTO Skills (SkillID, EmpID, SkillName) VALUES
(1, 1, 'C++'),
(2, 4, 'Java'),
(3, 1, 'Python'),
(4, 3, 'Blender');


CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    EmpID INT,
    SkillID INT,
    ProjectName VARCHAR(100),
    FOREIGN KEY (EmpID) REFERENCES Employees(EmpID),
    FOREIGN KEY (SkillID) REFERENCES Skills(SkillID)
);

INSERT INTO Projects (ProjectID, EmpID, SkillID, ProjectName) VALUES
(1, 1, 1, 'Industrial Robot'),
(2, 4, 2, 'Multiplatform GUI'),
(3, 3, 4, '3D Simulation'),
(4, 1, 3, 'Deep Learning Model'),
(5, NULL, NULL, 'IOS App'),
(6, 1, NULL, 'Advanced Calculator'),
(7, NULL, 5, 'Android App');

ALTER TABLE Skills ADD CONSTRAINT PK_SkillID PRIMARY KEY (SkillID);
INSERT INTO Skills (SkillID, EmpID, SkillName) VALUES (5, NULL, 'Android App');

ALTER TABLE Skills MODIFY EmpID INT NULL;

ALTER TABLE  Skills
ADD FOREIGN KEY (EmpID) REFERENCES Employees (EmpID);


Subquery in the SELECT Clause:
##############################


SQL QUERY TO FIND OUT WHICH EMPLOYEE IS WORKING ON WHICH PROJECT:
-----------------------------------------------------------------

SELECT (SELECT e.EmpName FROM Employees AS e WHERE e.EmpID = p.EmpID) AS EmpName, 
        ProjectName
FROM   Projects AS p
WHERE  p.EmpID IS NOT NULL;



Alternate solutions:
%%%%%%%%%%%%%%%%%%%%

#)We can use RIGHT JOIN with a WHERE clause for filtering. We can use RIGHT JOIN to connect two tables, and for the NULL values, we filter the records using the WHERE clause. The RIGHT JOIN ensures that all projects are listed, but it acts as an INNER JOIN due to the condition in the WHERE clause. Let’s have a look at the following query:

SELECT     e.EmpName, p.ProjectName
FROM       Projects p
RIGHT JOIN Employees AS e ON p.EmpID = e.EmpID
WHERE      p.EmpID IS NOT NULL;


#)We can use LEFT JOIN with a WHERE clause for filtering. We can use LEFT JOIN to connect two tables, and for the NULL values, we filter the records using the WHERE clause. The LEFT JOIN ensures that all employees are listed, but it acts as an INNER JOIN due to the condition in the WHERE clause. Let’s have a look at the following query:

SELECT    e.EmpName, p.ProjectName
FROM      Projects p
LEFT JOIN Employees AS e ON p.EmpID = e.EmpID
WHERE     e.EmpID IS NOT NULL;

#)We can use INNER JOIN with a WHERE clause for filtering. We can use INNER JOIN to connect two tables. Let’s have a look at the following query:

SELECT     e.EmpName, p.ProjectName
FROM       Projects p
INNER JOIN Employees AS e ON p.EmpID = e.EmpID;



Find the names of projects along with the employees working on them:
--------------------------------------------------------------------

SELECT ProjectName, (SELECT EmpName FROM Employees WHERE EmpID = Projects.EmpID) AS EmpName
FROM   Projects;

SELECT p.ProjectName, (SELECT EmpName FROM Employees WHERE EmpID = p.EmpID) AS EmpName
FROM   Projects AS p; 

Finding the highest Salary using an SQL query:
----------------------------------------------

SELECT EmpName
FROM   Employees
WHERE  Salary = (SELECT MAX(Salary) FROM Employees);

***************************************************************************************************************************************************************************************

Subquery and Calculations:
##########################


To analyze which of your products have above-average sales. Retrieve the names of the products and their category that have above-average sales.
------------------------------------------------------------------------------------------------------------------------------------------------

SELECT p.ProductName, p.Category
FROM   Products AS p 
WHERE  p.UnitsSold >
       (SELECT AVG(p2.UnitsSold) FROM Products AS p2);
	   
	   
Alternate solutions:
%%%%%%%%%%%%%%%%%%%%

Subquery in the FROM clause:
----------------------------
SELECT p.ProductName, p.Category
FROM   Products AS p,
       (SELECT AVG(p2.UnitsSold) AS AvgUnitsSold FROM Products AS p2) AS avg_table
WHERE  p.UnitsSold > avg_table.AvgUnitsSold;

Subquery with JOIN:
-------------------
SELECT     p.ProductName, p.Category
FROM       Products AS p
INNER JOIN (SELECT AVG(UnitsSold) AS AvgUnitsSold FROM Products) AS avg_table 
ON         p.UnitsSold > avg_table.AvgUnitsSold;


Finding the product that has the maximum price using Subquery:
--------------------------------------------------------------
SELECT ProductName
FROM   Products
WHERE  Price = (SELECT MAX(Price) FROM Products); 