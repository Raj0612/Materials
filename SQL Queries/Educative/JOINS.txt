WORKING WITH JOINS:
###################

Using LEFT JOIN:
----------------

CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    EmpName VARCHAR(100),
    Salary DECIMAL(10,2)
);

INSERT INTO Employees (EmpID, EmpName, Salary) VALUES
(1, 'Susan Lee', 50000.00),
(2, 'Alexa Smith', 60000.00),
(3, 'Sana Amberson', 45000.00),
(4, 'Sarah Ronald', 47000.00);


CREATE TABLE Skills (
    SkillID INT,
    EmpID INT,
    SkillName VARCHAR(50)
);

INSERT INTO Skills (SkillID, EmpID, SkillName) VALUES
(1, 1, 'C++'),
(2, 4, 'Java'),
(3, 1, 'Python'),
(4, 3, 'Blender');


CREATE TABLE Projects (
    ProjectID INT PRIMARY KEY,
    EmpID INT,
    SkillID INT,
    ProjectName VARCHAR(100),
    FOREIGN KEY (EmpID) REFERENCES Employees(EmpID),
    FOREIGN KEY (SkillID) REFERENCES Skills(SkillID)
);

INSERT INTO Projects (ProjectID, EmpID, SkillID, ProjectName) VALUES
(1, 1, 1, 'Industrial Robot'),
(2, 4, 2, 'Multiplatform GUI'),
(3, 3, 4, '3D Simulation'),
(4, 1, 3, 'Deep Learning Model'),
(5, NULL, NULL, 'IOS App'),
(6, 1, NULL, 'Advanced Calculator'),
(7, NULL, 5, 'Android App');


Find out all the employees, the projects they are currently assigned to, and those projects where there has been no assignment till now:
-----------------------------------------------------------------------------------------------------------------------------------------
SELECT    e.EmpName, p.ProjectName
FROM      Employees AS e 
LEFT JOIN Projects AS p ON e.EmpID = p.EmpID;


Alternate solutions:
%%%%%%%%%%%%%%%%%%%%

USING with LEFT JOIN:
*********************
SELECT    e.EmpName, p.ProjectName
FROM      Employees AS e 
LEFT JOIN Projects AS p USING (EmpID);

RIGHT JOIN:
***********
SELECT     e.EmpName, p.ProjectName
FROM       Projects AS p
RIGHT JOIN Employees AS e ON e.EmpID=p.EmpID;

***************************************************************************************************************************************************************************************

Using RIGHT JOIN:
#################

Find out all the employees assigned to different projects and those projects where there is no assignment till now:
-------------------------------------------------------------------------------------------------------------------

SELECT     e.EmpName, p.ProjectName
FROM       Employees AS e 
RIGHT JOIN Projects AS p ON e.EmpID = p.EmpID;


Alternate solutions:
%%%%%%%%%%%%%%%%%%%%

USING with RIGHT JOIN:
----------------------
SELECT     e.EmpName, p.ProjectName
FROM       Employees AS e 
RIGHT JOIN Projects AS p USING (EmpID);

LEFT JOIN:
----------
SELECT    e.EmpName, p.ProjectName
FROM      Projects AS p
LEFT JOIN Employees AS e ON e.EmpID=p.EmpID;


Subquery:
---------
SELECT (SELECT EmpName FROM Employees AS e WHERE e.EmpID = p.EmpID)
       AS EmpName, p.ProjectName
FROM   Projects AS p;

***************************************************************************************************************************************************************************************

Using INNER JOIN:
#################

Identify employees and their assigned projects:
-----------------------------------------------

SELECT     e.EmpName, p.ProjectName 
FROM       Employees AS e 
INNER JOIN Projects AS p ON e.EmpID = p.EmpID;

USING with INNER JOIN:
**********************
SELECT     e.EmpName, p.ProjectName 
FROM       Employees AS e 
INNER JOIN Projects AS p USING (EmpID);


LEFT JOIN and WHERE:
********************
SELECT    e.EmpName, p.ProjectName
FROM      Employees AS e
LEFT JOIN Projects AS p ON e.EmpID = p.EmpID
WHERE     p.ProjectName IS NOT NULL;


RIGHT JOIN and WHERE:
*********************
SELECT     e.EmpName, p.ProjectName
FROM       Employees AS e
RIGHT JOIN Projects AS p ON e.EmpID = p.EmpID
WHERE      e.EmpName IS NOT NULL;


USING with LEFT JOIN and WHERE:
*******************************
SELECT    e.EmpName, p.ProjectName
FROM      Employees AS e
LEFT JOIN Projects AS p USING (EmpID)
WHERE     p.ProjectName IS NOT NULL;


USING with RIGHT JOIN and WHERE:
********************************
SELECT     e.EmpName, p.ProjectName
FROM       Employees AS e
RIGHT JOIN Projects AS p USING (EmpID)
WHERE      e.EmpName IS NOT NULL;


The WHERE condition:
********************
SELECT e.EmpName, p.ProjectName
FROM   Employees AS e, Projects AS p
WHERE  e.EmpID = p.EmpID;


Finding the name of the employees whose skills are not in the database:
------------------------------------------------------------------------------
SELECT e.EmpName FROM Employees AS e WHERE


Finding the list of employees who have lesser salary than a specific employee:
------------------------------------------------------------------------------
SELECT 
    e1.EmpID AS EmpID,
    e1.EmpName AS EmpName,
    e1.Salary AS Salary
FROM 
    Employees AS e1
INNER JOIN 
    Employees AS e2 ON e1.Salary < e2.Salary
WHERE 
    e2.EmpName = 'Alexa Smith'; 
	
***************************************************************************************************************************************************************************************

Combining JOIN Statements:
##########################

Find out which employee is working on which project and what skills are required for that project:
--------------------------------------------------------------------------------------------------	

SELECT     e.EmpName, p.ProjectName, s.SkillName
FROM       Employees AS e 
INNER JOIN Projects AS p ON e.EmpID = p.EmpID 
INNER JOIN Skills AS s ON p.SkillID = s.SkillID;


LEFT JOIN:
**********
SELECT    e.EmpName, p.ProjectName, s.SkillName
FROM      Employees AS e 
LEFT JOIN Projects AS p ON e.EmpID = p.EmpID 
LEFT JOIN Skills AS s ON p.SkillID = s.SkillID
WHERE     p.EmpID IS NOT NULL AND s.SkillID IS NOT NULL;


RIGHT JOIN:
***********
SELECT     e.EmpName, p.ProjectName, s.SkillName
FROM       Employees AS e 
RIGHT JOIN Projects AS p ON e.EmpID = p.EmpID 
RIGHT JOIN Skills AS s ON p.SkillID = s.SkillID
WHERE      p.EmpID IS NOT NULL AND s.SkillID IS NOT NULL;


Multiple tables in the FROM clause:
***********************************
SELECT e.EmpName, p.ProjectName, s.SkillName
FROM   Employees AS e, Projects AS p, Skills AS s
WHERE  e.EmpID = p.EmpID 
       AND p.SkillID = s.SkillID;
	   
	   
Combination of INNER JOIN and LEFT JOIN:
****************************************
SELECT    e.EmpName, p.ProjectName, s.SkillName
FROM      Employees AS e 
INNER JOIN Projects AS p ON e.EmpID = p.EmpID 
LEFT JOIN Skills AS s ON p.SkillID = s.SkillID
WHERE     s.SkillID IS NOT NULL;


Combination of INNER JOIN and RIGHT JOIN:
*****************************************
SELECT     e.EmpName, p.ProjectName, s.SkillName
FROM       Employees AS e 
INNER JOIN Projects AS p ON e.EmpID = p.EmpID 
RIGHT JOIN Skills AS s ON p.SkillID = s.SkillID
WHERE      p.EmpID IS NOT NULL;



Finding the employees and projects that are unassigned:
-------------------------------------------------------
SELECT e.EmpID, e.EmpName, p.ProjectName FROM Employees e
LEFT JOIN Projects p ON e.EmpID = p.EmpID WHERE p.ProjectID IS NULL
UNION
SELECT e.EmpID, e.EmpName, p.ProjectName FROM Projects p
LEFT JOIN Employees e ON e.EmpID = p.EmpID WHERE e.EmpID IS NULL;


SELECT e.EmpID, e.EmpName, p.ProjectName FROM Projects p
RIGHT JOIN Employees e ON e.EmpID = p.EmpID WHERE p.ProjectID IS NULL
UNION
SELECT e.EmpID, e.EmpName, p.ProjectName FROM Employees e
RIGHT JOIN Projects p ON e.EmpID = p.EmpID WHERE e.EmpID IS NULL;


Finding the project names along with the skills required and the employee working on the project:
-------------------------------------------------------------------------------------------------
SELECT     p.ProjectName, s.SkillName, e.EmpName
FROM       Employees AS e
INNER JOIN Projects AS p ON e.EmpID = p.EmpID
LEFT JOIN  Skills AS s ON p.SkillID = s.SkillID;


Finding the list of skills along with the names of employees and the projects:
------------------------------------------------------------------------------
SELECT     s.SkillName, e.EmpName, p.ProjectName
FROM       Employees AS e
INNER JOIN Projects AS p ON e.EmpID = p.EmpID
RIGHT JOIN Skills AS s ON p.SkillID = s.SkillID; 

***************************************************************************************************************************************************************************************

